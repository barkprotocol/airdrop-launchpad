// schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas  = ["public", "auth"]
}

enum ClaimStatus {
  PENDING
  CLAIMED
  FAILED
  CANCELLED

  @@schema("public")
}

model Airdrop {
  id           String       @id @default(uuid())
  walletId     String
  wallet       Wallet       @relation(fields: [walletId], references: [id])
  claims       Claim[]
  createdAt    DateTime     @default(now())

  @@schema("public")
}

model Wallet {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  airdrops  Airdrop[]
  createdAt DateTime  @default(now())

  @@schema("public")
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  wallet       Wallet       @relation(fields: [walletId], references: [id])
  eligibility  Eligibility?
  claims       Claim[]
  createdAt    DateTime     @default(now())

  @@schema("public")
}

model Eligibility {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isEligible Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@schema("public")
}

model Claim {
  id                   String   @id @default(uuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [id])
  amount               BigInt
  transactionSignature String?
  status               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  claims               Claim[]
}

model AirdropWallet {
  id           String   @id @default(cuid())
  walletAddress String   @unique
  balance      Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AirdropConfig {
  id                String   @id @default(uuid())
  totalSupply       BigInt
  airdropAllocation BigInt
  airdropDate       DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Wallet {
  id        Int       @id @default(autoincrement())
  address   String    @unique
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  id        String      @id @default(uuid())
  airdropId String
  airdrop   Airdrop     @relation(fields: [airdropId], references: [id])
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  status    ClaimStatus @default(PENDING)
  createdAt DateTime    @default(now())

  @@schema("public")
}